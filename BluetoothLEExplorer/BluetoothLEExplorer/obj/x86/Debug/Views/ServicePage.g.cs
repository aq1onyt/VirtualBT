#pragma checksum "E:\GitHub\VirtualBT\BluetoothLEExplorer\BluetoothLEExplorer\Views\ServicePage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "A534136C88D793FD1C67A063FC88FE6573E56C4C0E4694BE6FAA20E8245AA57F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BluetoothLEExplorer.Views
{
    partial class ServicePage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Template10_Controls_PageHeader_Frame(global::Template10.Controls.PageHeader obj, global::Windows.UI.Xaml.Controls.Frame value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Controls.Frame) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Controls.Frame), targetNullValue);
                }
                obj.Frame = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(global::Windows.UI.Xaml.Controls.ProgressRing obj, global::System.Boolean value)
            {
                obj.IsActive = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ServicePage_obj10_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IServicePage_Bindings
        {
            private global::BluetoothLEExplorer.Models.ObservableGattCharacteristics dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj10;
            private global::Windows.UI.Xaml.Documents.Run obj12;
            private global::Windows.UI.Xaml.Documents.Run obj13;
            private global::Windows.UI.Xaml.Documents.Run obj15;
            private global::Windows.UI.Xaml.Documents.Run obj17;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj12TextDisabled = false;
            private static bool isobj13TextDisabled = false;
            private static bool isobj15TextDisabled = false;
            private static bool isobj17TextDisabled = false;

            private ServicePage_obj10_BindingsTracking bindingsTracking;

            public ServicePage_obj10_Bindings()
            {
                this.bindingsTracking = new ServicePage_obj10_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 129 && columnNumber == 38)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 131 && columnNumber == 77)
                {
                    isobj13TextDisabled = true;
                }
                else if (lineNumber == 134 && columnNumber == 38)
                {
                    isobj15TextDisabled = true;
                }
                else if (lineNumber == 137 && columnNumber == 38)
                {
                    isobj17TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10: // Views\ServicePage.xaml line 127
                        this.obj10 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TextBlock)target);
                        break;
                    case 12: // Views\ServicePage.xaml line 129
                        this.obj12 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 13: // Views\ServicePage.xaml line 131
                        this.obj13 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 15: // Views\ServicePage.xaml line 134
                        this.obj15 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 17: // Views\ServicePage.xaml line 137
                        this.obj17 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj10.Target as global::Windows.UI.Xaml.Controls.TextBlock).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::BluetoothLEExplorer.Models.ObservableGattCharacteristics) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IServicePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_Characteristic(obj.Characteristic, phase);
                        this.Update_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 129
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj12, obj, null);
                    }
                }
            }
            private void Update_Characteristic(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Characteristic_UserDescription(obj.UserDescription, phase);
                        this.Update_Characteristic_AttributeHandle(obj.AttributeHandle, phase);
                    }
                }
            }
            private void Update_Characteristic_UserDescription(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 131
                    if (!isobj13TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj13, obj, null);
                    }
                }
            }
            private void Update_Characteristic_AttributeHandle(global::System.UInt16 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 134
                    if (!isobj15TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj15, obj.ToString(), null);
                    }
                }
            }
            private void Update_Value(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 137
                    if (!isobj17TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj17, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ServicePage_obj10_BindingsTracking
            {
                private global::System.WeakReference<ServicePage_obj10_Bindings> weakRefToBindingObj; 

                public ServicePage_obj10_BindingsTracking(ServicePage_obj10_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ServicePage_obj10_Bindings>(obj);
                }

                public ServicePage_obj10_Bindings TryGetBindingObject()
                {
                    ServicePage_obj10_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ServicePage_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj = sender as global::BluetoothLEExplorer.Models.ObservableGattCharacteristics;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_Characteristic(obj.Characteristic, DATA_CHANGED);
                                bindings.Update_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Characteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Characteristic(obj.Characteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj)
                {
                    ServicePage_obj10_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ServicePage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IServicePage_Bindings
        {
            private global::BluetoothLEExplorer.Views.ServicePage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Template10.Controls.PageHeader obj7;
            private global::Windows.UI.Xaml.Controls.ListView obj8;
            private global::Windows.UI.Xaml.Controls.StackPanel obj18;
            private global::Windows.UI.Xaml.Controls.StackPanel obj19;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj20;
            private global::Windows.UI.Xaml.Controls.ProgressRing obj21;
            private global::Windows.UI.Xaml.Controls.TextBlock obj22;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj23;
            private global::Windows.UI.Xaml.Controls.ProgressRing obj24;
            private global::Windows.UI.Xaml.Controls.TextBlock obj25;
            private global::Windows.UI.Xaml.Documents.Run obj26;
            private global::Windows.UI.Xaml.Documents.Run obj27;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj7FrameDisabled = false;
            private static bool isobj8ItemsSourceDisabled = false;
            private static bool isobj18VisibilityDisabled = false;
            private static bool isobj19VisibilityDisabled = false;
            private static bool isobj20IsOnDisabled = false;
            private static bool isobj21VisibilityDisabled = false;
            private static bool isobj21IsActiveDisabled = false;
            private static bool isobj22VisibilityDisabled = false;
            private static bool isobj23IsOnDisabled = false;
            private static bool isobj24VisibilityDisabled = false;
            private static bool isobj24IsActiveDisabled = false;
            private static bool isobj25VisibilityDisabled = false;
            private static bool isobj26TextDisabled = false;
            private static bool isobj27TextDisabled = false;

            private ServicePage_obj1_BindingsTracking bindingsTracking;

            public ServicePage_obj1_Bindings()
            {
                this.bindingsTracking = new ServicePage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 77 && columnNumber == 50)
                {
                    isobj7FrameDisabled = true;
                }
                else if (lineNumber == 123 && columnNumber == 43)
                {
                    isobj8ItemsSourceDisabled = true;
                }
                else if (lineNumber == 99 && columnNumber == 81)
                {
                    isobj18VisibilityDisabled = true;
                }
                else if (lineNumber == 108 && columnNumber == 81)
                {
                    isobj19VisibilityDisabled = true;
                }
                else if (lineNumber == 110 && columnNumber == 57)
                {
                    isobj20IsOnDisabled = true;
                }
                else if (lineNumber == 111 && columnNumber == 35)
                {
                    isobj21VisibilityDisabled = true;
                }
                else if (lineNumber == 112 && columnNumber == 25)
                {
                    isobj21IsActiveDisabled = true;
                }
                else if (lineNumber == 115 && columnNumber == 25)
                {
                    isobj22VisibilityDisabled = true;
                }
                else if (lineNumber == 101 && columnNumber == 57)
                {
                    isobj23IsOnDisabled = true;
                }
                else if (lineNumber == 102 && columnNumber == 35)
                {
                    isobj24VisibilityDisabled = true;
                }
                else if (lineNumber == 103 && columnNumber == 25)
                {
                    isobj24IsActiveDisabled = true;
                }
                else if (lineNumber == 106 && columnNumber == 25)
                {
                    isobj25VisibilityDisabled = true;
                }
                else if (lineNumber == 97 && columnNumber == 26)
                {
                    isobj26TextDisabled = true;
                }
                else if (lineNumber == 93 && columnNumber == 26)
                {
                    isobj27TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // Views\ServicePage.xaml line 77
                        this.obj7 = (global::Template10.Controls.PageHeader)target;
                        break;
                    case 8: // Views\ServicePage.xaml line 120
                        this.obj8 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 18: // Views\ServicePage.xaml line 99
                        this.obj18 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 19: // Views\ServicePage.xaml line 108
                        this.obj19 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 20: // Views\ServicePage.xaml line 109
                        this.obj20 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_20(this.obj20);
                        break;
                    case 21: // Views\ServicePage.xaml line 111
                        this.obj21 = (global::Windows.UI.Xaml.Controls.ProgressRing)target;
                        break;
                    case 22: // Views\ServicePage.xaml line 113
                        this.obj22 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 23: // Views\ServicePage.xaml line 100
                        this.obj23 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_23(this.obj23);
                        break;
                    case 24: // Views\ServicePage.xaml line 102
                        this.obj24 = (global::Windows.UI.Xaml.Controls.ProgressRing)target;
                        break;
                    case 25: // Views\ServicePage.xaml line 104
                        this.obj25 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 26: // Views\ServicePage.xaml line 97
                        this.obj26 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 27: // Views\ServicePage.xaml line 93
                        this.obj27 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IServicePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Views.ServicePage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Views.ServicePage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Frame(obj.Frame, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_Frame(global::Windows.UI.Xaml.Controls.Frame obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ServicePage.xaml line 77
                    if (!isobj7FrameDisabled)
                    {
                        XamlBindingSetters.Set_Template10_Controls_PageHeader_Frame(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel(global::BluetoothLEExplorer.ViewModels.ServicePageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedService(obj.SelectedService, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ServiceCanNotify(obj.ServiceCanNotify, phase);
                        this.Update_ViewModel_ServiceCanIndicate(obj.ServiceCanIndicate, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Indicate(obj.Indicate, phase);
                        this.Update_ViewModel_IndicateProgress(obj.IndicateProgress, phase);
                        this.Update_ViewModel_IndicateError(obj.IndicateError, phase);
                        this.Update_ViewModel_Notify(obj.Notify, phase);
                        this.Update_ViewModel_NotifyProgress(obj.NotifyProgress, phase);
                        this.Update_ViewModel_NotifyError(obj.NotifyError, phase);
                        this.Update_ViewModel_SelectedDevice(obj.SelectedDevice, phase);
                    }
                }
            }
            private void Update_ViewModel_SelectedService(global::BluetoothLEExplorer.Models.ObservableGattDeviceService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedService_Characteristics(obj.Characteristics, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedService_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_ViewModel_SelectedService_Characteristics(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ServicePage.xaml line 120
                    if (!isobj8ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ServiceCanNotify(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ServicePage.xaml line 99
                    if (!isobj18VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj18, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ViewModel_ServiceCanIndicate(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ServicePage.xaml line 108
                    if (!isobj19VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj19, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ViewModel_Indicate(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 109
                    if (!isobj20IsOnDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj20, obj);
                    }
                }
            }
            private void Update_ViewModel_IndicateProgress(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 111
                    if (!isobj21VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj21, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                    // Views\ServicePage.xaml line 111
                    if (!isobj21IsActiveDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(this.obj21, obj);
                    }
                }
            }
            private void Update_ViewModel_IndicateError(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 113
                    if (!isobj22VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj22, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ViewModel_Notify(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 100
                    if (!isobj23IsOnDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj23, obj);
                    }
                }
            }
            private void Update_ViewModel_NotifyProgress(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 102
                    if (!isobj24VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj24, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                    // Views\ServicePage.xaml line 102
                    if (!isobj24IsActiveDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(this.obj24, obj);
                    }
                }
            }
            private void Update_ViewModel_NotifyError(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 104
                    if (!isobj25VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj25, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ViewModel_SelectedService_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 97
                    if (!isobj26TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj26, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedDevice(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_SelectedDevice(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedDevice_BluetoothAddressAsString(obj.BluetoothAddressAsString, phase);
                    }
                }
            }
            private void Update_ViewModel_SelectedDevice_BluetoothAddressAsString(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ServicePage.xaml line 93
                    if (!isobj27TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj27, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_20_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Indicate = this.obj20.IsOn;
                        }
                    }
                }
            }
            private void UpdateTwoWay_23_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Notify = this.obj23.IsOn;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ServicePage_obj1_BindingsTracking
            {
                private global::System.WeakReference<ServicePage_obj1_Bindings> weakRefToBindingObj; 

                public ServicePage_obj1_BindingsTracking(ServicePage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ServicePage_obj1_Bindings>(obj);
                }

                public ServicePage_obj1_Bindings TryGetBindingObject()
                {
                    ServicePage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_SelectedService(null);
                    UpdateChildListeners_ViewModel_SelectedDevice(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.ServicePageViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.ServicePageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SelectedService(obj.SelectedService, DATA_CHANGED);
                                bindings.Update_ViewModel_Indicate(obj.Indicate, DATA_CHANGED);
                                bindings.Update_ViewModel_IndicateProgress(obj.IndicateProgress, DATA_CHANGED);
                                bindings.Update_ViewModel_IndicateError(obj.IndicateError, DATA_CHANGED);
                                bindings.Update_ViewModel_Notify(obj.Notify, DATA_CHANGED);
                                bindings.Update_ViewModel_NotifyProgress(obj.NotifyProgress, DATA_CHANGED);
                                bindings.Update_ViewModel_NotifyError(obj.NotifyError, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedDevice(obj.SelectedDevice, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SelectedService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedService(obj.SelectedService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Indicate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Indicate(obj.Indicate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IndicateProgress":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IndicateProgress(obj.IndicateProgress, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IndicateError":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IndicateError(obj.IndicateError, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Notify":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Notify(obj.Notify, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NotifyProgress":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NotifyProgress(obj.NotifyProgress, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NotifyError":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NotifyError(obj.NotifyError, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedDevice":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedDevice(obj.SelectedDevice, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.ServicePageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::BluetoothLEExplorer.ViewModels.ServicePageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableGattDeviceService obj = sender as global::BluetoothLEExplorer.Models.ObservableGattDeviceService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SelectedService_Name(obj.Name, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedService_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.Models.ObservableGattDeviceService cache_ViewModel_SelectedService = null;
                public void UpdateChildListeners_ViewModel_SelectedService(global::BluetoothLEExplorer.Models.ObservableGattDeviceService obj)
                {
                    if (obj != cache_ViewModel_SelectedService)
                    {
                        if (cache_ViewModel_SelectedService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedService).PropertyChanged -= PropertyChanged_ViewModel_SelectedService;
                            cache_ViewModel_SelectedService = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedService;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_SelectedDevice(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ServicePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj = sender as global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SelectedDevice_BluetoothAddressAsString(obj.BluetoothAddressAsString, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "BluetoothAddressAsString":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedDevice_BluetoothAddressAsString(obj.BluetoothAddressAsString, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice cache_ViewModel_SelectedDevice = null;
                public void UpdateChildListeners_ViewModel_SelectedDevice(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj)
                {
                    if (obj != cache_ViewModel_SelectedDevice)
                    {
                        if (cache_ViewModel_SelectedDevice != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_SelectedDevice).PropertyChanged -= PropertyChanged_ViewModel_SelectedDevice;
                            cache_ViewModel_SelectedDevice = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_SelectedDevice = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_SelectedDevice;
                        }
                    }
                }
                public void RegisterTwoWayListener_20(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_20_IsOn();
                        }
                    });
                }
                public void RegisterTwoWayListener_23(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_23_IsOn();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\ServicePage.xaml line 1
                {
                    this.ThisPage = (global::Windows.UI.Xaml.Controls.Page)(target);
                }
                break;
            case 2: // Views\ServicePage.xaml line 17
                {
                    this.ViewModel = (global::BluetoothLEExplorer.ViewModels.ServicePageViewModel)(target);
                }
                break;
            case 3: // Views\ServicePage.xaml line 48
                {
                    this.AdaptiveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 4: // Views\ServicePage.xaml line 49
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 5: // Views\ServicePage.xaml line 57
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6: // Views\ServicePage.xaml line 65
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 7: // Views\ServicePage.xaml line 77
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 8: // Views\ServicePage.xaml line 120
                {
                    this.CharacteristicsListView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.CharacteristicsListView).ItemClick += this.CharacteristicsListView_ItemClick;
                }
                break;
            case 20: // Views\ServicePage.xaml line 109
                {
                    this.IndicateSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 22: // Views\ServicePage.xaml line 113
                {
                    this.IndicateError = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 23: // Views\ServicePage.xaml line 100
                {
                    this.NotifySwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\ServicePage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    ServicePage_obj1_Bindings bindings = new ServicePage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 10: // Views\ServicePage.xaml line 127
                {                    
                    global::Windows.UI.Xaml.Controls.TextBlock element10 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                    ServicePage_obj10_Bindings bindings = new ServicePage_obj10_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element10.DataContext);
                    element10.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element10, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element10, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

