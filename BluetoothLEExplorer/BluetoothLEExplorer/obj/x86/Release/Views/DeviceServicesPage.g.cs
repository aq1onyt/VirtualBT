#pragma checksum "C:\Users\alisa\Documents\GitHub\VirtualBT\BluetoothLEExplorer\BluetoothLEExplorer\Views\DeviceServicesPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "B9F91BC6827DC44EFCEC3B9CCC3E0DD9D818F2F7A1B531576E4D9EFF0866050D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BluetoothLEExplorer.Views
{
    partial class DeviceServicesPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Template10_Controls_PageHeader_Frame(global::Template10.Controls.PageHeader obj, global::Windows.UI.Xaml.Controls.Frame value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Controls.Frame) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Controls.Frame), targetNullValue);
                }
                obj.Frame = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Border_Background(global::Windows.UI.Xaml.Controls.Border obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DeviceServicesPage_obj13_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDeviceServicesPage_Bindings
        {
            private global::BluetoothLEExplorer.Models.ObservableGattCharacteristics dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj13;
            private global::Windows.UI.Xaml.Documents.Run obj15;
            private global::Windows.UI.Xaml.Documents.Run obj17;
            private global::Windows.UI.Xaml.Documents.Run obj18;
            private global::Windows.UI.Xaml.Documents.Run obj20;
            private global::Windows.UI.Xaml.Documents.Run obj21;
            private global::Windows.UI.Xaml.Documents.Run obj23;

            private DeviceServicesPage_obj13_BindingsTracking bindingsTracking;

            public DeviceServicesPage_obj13_Bindings()
            {
                this.bindingsTracking = new DeviceServicesPage_obj13_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 13: // Views\DeviceServicesPage.xaml line 162
                        this.obj13 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.TextBlock)target);
                        break;
                    case 15: // Views\DeviceServicesPage.xaml line 164
                        this.obj15 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 17: // Views\DeviceServicesPage.xaml line 166
                        this.obj17 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 18: // Views\DeviceServicesPage.xaml line 168
                        this.obj18 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 20: // Views\DeviceServicesPage.xaml line 171
                        this.obj20 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 21: // Views\DeviceServicesPage.xaml line 173
                        this.obj21 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 23: // Views\DeviceServicesPage.xaml line 176
                        this.obj23 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj13.Target as global::Windows.UI.Xaml.Controls.TextBlock).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::BluetoothLEExplorer.Models.ObservableGattCharacteristics) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IDeviceServicesPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Models.ObservableGattCharacteristics)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Name(obj.Name, phase);
                        this.Update_ShortUUID(obj.ShortUUID, phase);
                        this.Update_Characteristic(obj.Characteristic, phase);
                        this.Update_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 164
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj15, obj, null);
                }
            }
            private void Update_ShortUUID(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 166
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj17, obj, null);
                }
            }
            private void Update_Characteristic(global::Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Characteristic_UserDescription(obj.UserDescription, phase);
                        this.Update_Characteristic_AttributeHandle(obj.AttributeHandle, phase);
                    }
                }
            }
            private void Update_Characteristic_UserDescription(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 168
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj18, obj, null);
                }
            }
            private void Update_Characteristic_AttributeHandle(global::System.UInt16 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 171
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj20, obj.ToString(), null);
                    // Views\DeviceServicesPage.xaml line 173
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj21, (global::System.String)this.LookupConverter("StringFormatConverter").Convert(obj, typeof(global::System.String), "0x{0:X8}", null), null);
                }
            }
            private void Update_Value(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 176
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj23, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DeviceServicesPage_obj13_BindingsTracking
            {
                private global::System.WeakReference<DeviceServicesPage_obj13_Bindings> weakRefToBindingObj; 

                public DeviceServicesPage_obj13_BindingsTracking(DeviceServicesPage_obj13_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DeviceServicesPage_obj13_Bindings>(obj);
                }

                public DeviceServicesPage_obj13_Bindings TryGetBindingObject()
                {
                    DeviceServicesPage_obj13_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DeviceServicesPage_obj13_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj = sender as global::BluetoothLEExplorer.Models.ObservableGattCharacteristics;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Name(obj.Name, DATA_CHANGED);
                                bindings.Update_ShortUUID(obj.ShortUUID, DATA_CHANGED);
                                bindings.Update_Characteristic(obj.Characteristic, DATA_CHANGED);
                                bindings.Update_Value(obj.Value, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShortUUID":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ShortUUID(obj.ShortUUID, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Characteristic":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Characteristic(obj.Characteristic, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Value":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Value(obj.Value, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::BluetoothLEExplorer.Models.ObservableGattCharacteristics obj)
                {
                    DeviceServicesPage_obj13_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DeviceServicesPage_obj10_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDeviceServicesPage_Bindings
        {
            private global::BluetoothLEExplorer.Models.ObservableGattDeviceService dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj10;
            private global::Windows.UI.Xaml.Controls.ListView obj11;
            private global::Windows.UI.Xaml.Documents.Run obj24;
            private global::Windows.UI.Xaml.Documents.Run obj25;

            public DeviceServicesPage_obj10_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10: // Views\DeviceServicesPage.xaml line 146
                        this.obj10 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.StackPanel)target);
                        break;
                    case 11: // Views\DeviceServicesPage.xaml line 155
                        this.obj11 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 24: // Views\DeviceServicesPage.xaml line 153
                        this.obj24 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 25: // Views\DeviceServicesPage.xaml line 149
                        this.obj25 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj10.Target as global::Windows.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::BluetoothLEExplorer.Models.ObservableGattDeviceService) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IDeviceServicesPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Models.ObservableGattDeviceService)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Models.ObservableGattDeviceService obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Characteristics(obj.Characteristics, phase);
                        this.Update_UUID(obj.UUID, phase);
                        this.Update_Name(obj.Name, phase);
                    }
                }
            }
            private void Update_Characteristics(global::System.Collections.ObjectModel.ObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattCharacteristics> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 155
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj11, obj, null);
                }
            }
            private void Update_UUID(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 153
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj24, obj, null);
                }
            }
            private void Update_Name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 149
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj25, obj, null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DeviceServicesPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDeviceServicesPage_Bindings
        {
            private global::BluetoothLEExplorer.Views.DeviceServicesPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Template10.Controls.PageHeader obj7;
            private global::Windows.UI.Xaml.Controls.ListView obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj26;
            private global::Windows.UI.Xaml.Controls.TextBlock obj27;
            private global::Windows.UI.Xaml.Controls.Border obj28;
            private global::Windows.UI.Xaml.Controls.Button obj29;
            private global::Windows.UI.Xaml.Controls.Button obj30;
            private global::Windows.UI.Xaml.Controls.Button obj31;
            private global::Windows.UI.Xaml.Documents.Run obj32;
            private global::Windows.UI.Xaml.Documents.Run obj33;
            private global::Windows.UI.Xaml.Documents.Run obj34;
            private global::Windows.UI.Xaml.Documents.Run obj35;
            private global::Windows.UI.Xaml.Documents.Run obj36;
            private global::Windows.UI.Xaml.Documents.Run obj37;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.RoutedEventHandler obj29Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj30Click;
            private global::Windows.UI.Xaml.RoutedEventHandler obj31Click;

            private DeviceServicesPage_obj1_BindingsTracking bindingsTracking;

            public DeviceServicesPage_obj1_Bindings()
            {
                this.bindingsTracking = new DeviceServicesPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // Views\DeviceServicesPage.xaml line 92
                        this.obj7 = (global::Template10.Controls.PageHeader)target;
                        break;
                    case 8: // Views\DeviceServicesPage.xaml line 138
                        this.obj8 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 26: // Views\DeviceServicesPage.xaml line 106
                        this.obj26 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 27: // Views\DeviceServicesPage.xaml line 123
                        this.obj27 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 28: // Views\DeviceServicesPage.xaml line 127
                        this.obj28 = (global::Windows.UI.Xaml.Controls.Border)target;
                        break;
                    case 29: // Views\DeviceServicesPage.xaml line 133
                        this.obj29 = (global::Windows.UI.Xaml.Controls.Button)target;
                        this.obj29Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.Refresh();
                        };
                        ((global::Windows.UI.Xaml.Controls.Button)target).Click += obj29Click;
                        break;
                    case 30: // Views\DeviceServicesPage.xaml line 134
                        this.obj30 = (global::Windows.UI.Xaml.Controls.Button)target;
                        this.obj30Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.StartTransaction();
                        };
                        ((global::Windows.UI.Xaml.Controls.Button)target).Click += obj30Click;
                        break;
                    case 31: // Views\DeviceServicesPage.xaml line 135
                        this.obj31 = (global::Windows.UI.Xaml.Controls.Button)target;
                        this.obj31Click = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.ViewModel.CommitTransaction();
                        };
                        ((global::Windows.UI.Xaml.Controls.Button)target).Click += obj31Click;
                        break;
                    case 32: // Views\DeviceServicesPage.xaml line 130
                        this.obj32 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 33: // Views\DeviceServicesPage.xaml line 125
                        this.obj33 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 34: // Views\DeviceServicesPage.xaml line 121
                        this.obj34 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 35: // Views\DeviceServicesPage.xaml line 117
                        this.obj35 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 36: // Views\DeviceServicesPage.xaml line 113
                        this.obj36 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 37: // Views\DeviceServicesPage.xaml line 109
                        this.obj37 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            // IDeviceServicesPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::BluetoothLEExplorer.Views.DeviceServicesPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::BluetoothLEExplorer.Views.DeviceServicesPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Frame(obj.Frame, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_Frame(global::Windows.UI.Xaml.Controls.Frame obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 92
                    XamlBindingSetters.Set_Template10_Controls_PageHeader_Frame(this.obj7, obj, null);
                }
            }
            private void Update_ViewModel(global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Device(obj.Device, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsSecureConnectionSupported(obj.IsSecureConnectionSupported, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsTransactionInProgress(obj.IsTransactionInProgress, phase);
                    }
                }
            }
            private void Update_ViewModel_Device(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Device(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Device_Services(obj.Services, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Device_ErrorText(obj.ErrorText, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Device_IsConnected(obj.IsConnected, phase);
                        this.Update_ViewModel_Device_IsSecureConnection(obj.IsSecureConnection, phase);
                        this.Update_ViewModel_Device_AdvertisementServiceCount(obj.AdvertisementServiceCount, phase);
                        this.Update_ViewModel_Device_GattServicesChangedInstances(obj.GattServicesChangedInstances, phase);
                        this.Update_ViewModel_Device_BluetoothAddressAsString(obj.BluetoothAddressAsString, phase);
                    }
                }
            }
            private void Update_ViewModel_Device_Services(global::BluetoothLEExplorer.Models.DisposableObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Device_Services(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Device_Services_Count(obj.Count, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 138
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj8, obj, null);
                }
            }
            private void Update_ViewModel_Device_ErrorText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 106
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj26, obj, null);
                    // Views\DeviceServicesPage.xaml line 106
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj26, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenBlankConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_IsSecureConnectionSupported(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 123
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj27, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_Device_IsConnected(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 130
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj32, obj.ToString(), null);
                }
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 127
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Border_Background(this.obj28, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("BackgroundColorConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_IsTransactionInProgress(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 134
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj30, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenFalseConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    // Views\DeviceServicesPage.xaml line 135
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj31, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibleWhenTrueConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_Device_IsSecureConnection(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 125
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj33, obj.ToString(), null);
                }
            }
            private void Update_ViewModel_Device_AdvertisementServiceCount(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 121
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj34, obj.ToString(), null);
                }
            }
            private void Update_ViewModel_Device_GattServicesChangedInstances(global::System.UInt64 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 117
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj35, obj.ToString(), null);
                }
            }
            private void Update_ViewModel_Device_Services_Count(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 113
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj36, obj.ToString(), null);
                }
            }
            private void Update_ViewModel_Device_BluetoothAddressAsString(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\DeviceServicesPage.xaml line 109
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj37, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DeviceServicesPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<DeviceServicesPage_obj1_Bindings> weakRefToBindingObj; 

                public DeviceServicesPage_obj1_BindingsTracking(DeviceServicesPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DeviceServicesPage_obj1_Bindings>(obj);
                }

                public DeviceServicesPage_obj1_Bindings TryGetBindingObject()
                {
                    DeviceServicesPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_Device(null);
                    UpdateChildListeners_ViewModel_Device_Services(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DeviceServicesPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel obj = sender as global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Device(obj.Device, DATA_CHANGED);
                                bindings.Update_ViewModel_IsTransactionInProgress(obj.IsTransactionInProgress, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Device":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Device(obj.Device, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTransactionInProgress":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsTransactionInProgress(obj.IsTransactionInProgress, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Device(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DeviceServicesPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj = sender as global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Device_Services(obj.Services, DATA_CHANGED);
                                bindings.Update_ViewModel_Device_IsConnected(obj.IsConnected, DATA_CHANGED);
                                bindings.Update_ViewModel_Device_IsSecureConnection(obj.IsSecureConnection, DATA_CHANGED);
                                bindings.Update_ViewModel_Device_AdvertisementServiceCount(obj.AdvertisementServiceCount, DATA_CHANGED);
                                bindings.Update_ViewModel_Device_GattServicesChangedInstances(obj.GattServicesChangedInstances, DATA_CHANGED);
                                bindings.Update_ViewModel_Device_BluetoothAddressAsString(obj.BluetoothAddressAsString, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Services":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Device_Services(obj.Services, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsConnected":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Device_IsConnected(obj.IsConnected, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSecureConnection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Device_IsSecureConnection(obj.IsSecureConnection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AdvertisementServiceCount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Device_AdvertisementServiceCount(obj.AdvertisementServiceCount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GattServicesChangedInstances":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Device_GattServicesChangedInstances(obj.GattServicesChangedInstances, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BluetoothAddressAsString":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Device_BluetoothAddressAsString(obj.BluetoothAddressAsString, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice cache_ViewModel_Device = null;
                public void UpdateChildListeners_ViewModel_Device(global::BluetoothLEExplorer.Models.ObservableBluetoothLEDevice obj)
                {
                    if (obj != cache_ViewModel_Device)
                    {
                        if (cache_ViewModel_Device != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Device).PropertyChanged -= PropertyChanged_ViewModel_Device;
                            cache_ViewModel_Device = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Device = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Device;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Device_Services(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DeviceServicesPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::BluetoothLEExplorer.Models.DisposableObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService> obj = sender as global::BluetoothLEExplorer.Models.DisposableObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_Device_Services_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Device_Services_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Device_Services(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    DeviceServicesPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::BluetoothLEExplorer.Models.DisposableObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService> obj = sender as global::BluetoothLEExplorer.Models.DisposableObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService>;
                if (obj != null)
                {
                    bindings.Update_ViewModel_Device_Services_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::BluetoothLEExplorer.Models.DisposableObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService> cache_ViewModel_Device_Services = null;
                public void UpdateChildListeners_ViewModel_Device_Services(global::BluetoothLEExplorer.Models.DisposableObservableCollection<global::BluetoothLEExplorer.Models.ObservableGattDeviceService> obj)
                {
                    if (obj != cache_ViewModel_Device_Services)
                    {
                        if (cache_ViewModel_Device_Services != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Device_Services).PropertyChanged -= PropertyChanged_ViewModel_Device_Services;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Device_Services).CollectionChanged -= CollectionChanged_ViewModel_Device_Services;
                            cache_ViewModel_Device_Services = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Device_Services = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Device_Services;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Device_Services;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\DeviceServicesPage.xaml line 1
                {
                    this.ThisPage = (global::Windows.UI.Xaml.Controls.Page)(target);
                }
                break;
            case 2: // Views\DeviceServicesPage.xaml line 18
                {
                    this.ViewModel = (global::BluetoothLEExplorer.ViewModels.DeviceServicesPageViewModel)(target);
                }
                break;
            case 3: // Views\DeviceServicesPage.xaml line 63
                {
                    this.AdaptiveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 4: // Views\DeviceServicesPage.xaml line 64
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 5: // Views\DeviceServicesPage.xaml line 72
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6: // Views\DeviceServicesPage.xaml line 80
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 7: // Views\DeviceServicesPage.xaml line 92
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 8: // Views\DeviceServicesPage.xaml line 138
                {
                    this.ServicesListView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.ServicesListView).ItemClick += this.ServicesListView_ItemClick;
                }
                break;
            case 11: // Views\DeviceServicesPage.xaml line 155
                {
                    global::Windows.UI.Xaml.Controls.ListView element11 = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)element11).ItemClick += this.CharacteristicsListView_ItemClick;
                }
                break;
            case 29: // Views\DeviceServicesPage.xaml line 133
                {
                    this.RefreshButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 30: // Views\DeviceServicesPage.xaml line 134
                {
                    this.StartTransactionButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 31: // Views\DeviceServicesPage.xaml line 135
                {
                    this.CommitTransactionButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.19041.685")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\DeviceServicesPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    DeviceServicesPage_obj1_Bindings bindings = new DeviceServicesPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 10: // Views\DeviceServicesPage.xaml line 146
                {                    
                    global::Windows.UI.Xaml.Controls.StackPanel element10 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                    DeviceServicesPage_obj10_Bindings bindings = new DeviceServicesPage_obj10_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element10.DataContext);
                    element10.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element10, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element10, bindings);
                }
                break;
            case 13: // Views\DeviceServicesPage.xaml line 162
                {                    
                    global::Windows.UI.Xaml.Controls.TextBlock element13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                    DeviceServicesPage_obj13_Bindings bindings = new DeviceServicesPage_obj13_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element13.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element13.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element13, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element13, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

